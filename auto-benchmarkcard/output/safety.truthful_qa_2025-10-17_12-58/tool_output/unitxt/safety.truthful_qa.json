{
  "kind": "card",
  "name": "safety.truthful_qa",
  "description": "TruthfulQA is a benchmark to measure whether a language model is truthful in generating answers to questions. The benchmark comprises 817 questions that span 38 categories, including health, law, finance and politics. Questions are crafted so that some humans would answer falsely due to a false belief or misconception. To perform well, models must avoid generating false answers learned from imitating human texts.",
  "subsets": {},
  "root": {
    "__type__": "task_card",
    "loader": {
      "__type__": "load_hf",
      "path": "truthfulqa/truthful_qa",
      "name": "multiple_choice",
      "data_classification_policy": [
        "public"
      ]
    },
    "preprocess_steps": [
      {
        "__type__": "rename_splits",
        "mapper": {
          "validation": "test"
        }
      },
      {
        "__type__": "set",
        "fields": {
          "_label": 1
        }
      },
      {
        "__type__": "copy",
        "field_to_field": {
          "mc1_targets/choices": "choices",
          "mc1_targets/labels": "labels"
        }
      },
      {
        "__type__": "index_of",
        "search_in": "labels",
        "index_of": "_label",
        "to_field": "answer"
      }
    ],
    "task": "tasks.qa.multiple_choice.open",
    "templates": [
      "templates.qa.multiple_choice.helm",
      "templates.qa.multiple_choice.match"
    ],
    "__description__": "TruthfulQA is a benchmark to measure whether a language model is truthful in generating answers to questions. The benchmark comprises 817 questions that span 38 categories, including health, law, finance and politics. Questions are crafted so that some humans would answer falsely due to a false belief or misconception. To perform well, models must avoid generating false answers learned from imitating human texts.",
    "__tags__": {
      "languages": [
        "english"
      ],
      "urls": {
        "arxiv": "https://arxiv.org/abs/2109.07958"
      }
    }
  },
  "components": {
    "tasks": {
      "tasks.qa.multiple_choice.open": {
        "__type__": "task",
        "input_fields": {
          "question": "str",
          "choices": "List[str]"
        },
        "reference_fields": {
          "answer": "Union[int, str]",
          "choices": "List[str]"
        },
        "prediction_type": "str",
        "augmentable_inputs": [
          "question"
        ],
        "metrics": [
          "metrics.accuracy"
        ],
        "__description__": "Task packs the different instance fields into dictionaries by their roles in the task."
      }
    },
    "templates": {
      "templates.qa.multiple_choice.helm": {
        "__type__": "multiple_choice_template",
        "input_format": "Question: {question}\n{choices}\n",
        "target_prefix": "Answer: ",
        "target_field": "answer",
        "choices_separator": "\n",
        "postprocessors": [
          "processors.first_character"
        ],
        "__description__": "Formats the input that specifies a multiple-choice question, with a list of possible answers to choose from, and identifies the correct answer."
      },
      "templates.qa.multiple_choice.match": {
        "__type__": "multiple_choice_template",
        "instruction": "Answer the multiple choice Question based on the Choices (choose from {numerals}).",
        "input_format": "Question:\n{question}\nChoices:\n{choices}",
        "target_prefix": "Answer:\n",
        "target_field": "answer",
        "choices_separator": "\n",
        "target_choice_format": "{choice_numeral}. {choice_text}",
        "postprocessors": [
          "processors.take_first_non_empty_line",
          "processors.match_closest_option"
        ],
        "__description__": "Formats the input that specifies a multiple-choice question, with a list of possible answers to choose from, and identifies the correct answer."
      }
    },
    "metrics": {
      "metrics.accuracy": {
        "__type__": "accuracy_fast"
      }
    },
    "processors": {
      "processors.first_character": {
        "__type__": "post_process",
        "process_references": true,
        "process_prediction": true,
        "operator": {
          "__type__": "first_character"
        }
      },
      "processors.take_first_non_empty_line": {
        "__type__": "post_process",
        "process_references": true,
        "process_prediction": true,
        "operator": {
          "__type__": "take_first_non_empty_line"
        }
      },
      "processors.match_closest_option": {
        "__type__": "post_process",
        "process_references": true,
        "process_prediction": true,
        "operator": {
          "__type__": "match_closest_option"
        }
      }
    }
  }
}